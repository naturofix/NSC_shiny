#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#

library(shiny)

library(STRINGdb)
library(gplots)
library(gtools)
library(topGO)
library(biomaRt)
#library(plotly)

source('/blackburn3/scripts/CRUNCH/V2.3/maxquant_r_gui/00_functions/shiny_function.R')

setwd('/mnt/BLACKBURNLAB/2015/Neural_Stem_Cells/Data_for_Thesis/Final_Data/GO_data/')

ESC_name = "df.Huang2016.txt.edited.log2_ratio.different.mart.all.MCT.all.t_test"
GE_name = 'df.GE.log2_ratio.different.all.MCT.all'
SILAC_name = 'df.SILAC_all.comparison.all.MCT.all.mapping'
NES_name = 'df.Diff_LFQ.Sai.first_element_ratio.log2.all.MCT.all.mapping'
NS_name = 'df.Diff_LFQ.HB.first_element_ratio.log2.all.MCT.all.mapping'
table_name_list = c(SILAC_name,NES_name,NS_name,GE_name,ESC_name)

data_list = c('ESC' = c('df_Huang2016_txt_edited_log2_ratio_different_mart_all_MCT_all_t_test' ),
              'GE' = c('df_GE_log2_ratio_different_all_MCT_all'), 
              'SILAC' = c('df_SILAC_all_comparison_all_MCT_all_mapping'),
              'NES-Diff' = c('df_Diff_LFQ_Sai_first_element_ratio_log2_all_MCT_all_mapping'),
              'NS-Diff' = c('df_Diff_LFQ_HB_first_element_ratio_log2_all_MCT_all_mapping')
              )

#data_list = c('df_SILAC_all_comparison_all_MCT_all_mapping')
limit_list = c('total','total.sig','total.sig.stat')
stat_list = c('classicFisher.bonferroni','fisher.weight01')
mapped_list = c('all_mapped','sig_mapped','sig_mapped_up','sig_mapped_down')

topGO_enrich_cutoff = 0.05
ontology_list = c('CC','BP','MF')

# Define UI for application that draws a histogram
ui <- fluidPage(
   
   # Application title
   titlePanel("topGO String Viewer"),

   fluidRow(
     column(4, align = 'center',
        selectInput(inputId = 'data',  # Drop down menu to select the producer and cultivar
                    label = 'Select data',
                    choices = data_list,
                    selected = data_list[1],
                    multiple = F),
        
        selectInput(inputId = 'limit',  # Drop down menu to select the producer and cultivar
                    label = 'Limit',
                    choices = limit_list,
                    selected = limit_list[3],
                    multiple = F),
        
        selectInput(inputId = 'stat',  # Drop down menu to select the producer and cultivar
                    label = 'Select Stat',
                    choices = stat_list,
                    selected = stat_list[2],
                    multiple = F),
        
        selectInput(inputId = 'mapped',  # Drop down menu to select the producer and cultivar
                    label = 'mapped',
                    choices = mapped_list,
                    selected = mapped_list[2],
                    multiple = F),
       
         selectInput(inputId = 'ontology',  # Drop down menu to select the producer and cultivar
                    label = 'Select Ontology',
                    choices = ontology_list,
                    selected = ontology_list[1],
                    multiple = F),
        
        #HTML(paste(textOutput('table_name'))),
                    
        HTML(paste(textOutput('term_num'))),

        uiOutput('term_list'),
                    
        HTML(paste(textOutput('sn_list')))
          
     ),

     column(8, align = 'center',
            navbarPage(title = NULL,
                       tabPanel('Empty'),
                       tabPanel('Enrichment',
                                uiOutput('enrich_slider'),
                                HTML(paste(textOutput('m_name'))),
                                plotOutput('enrich_barplot',height = 750)),
                       #tabPanel('Data',dataTableOutput('topGO_sig')),
                       tabPanel('String',
                                actionButton("run_sn", "Generate Plot"),
                                actionButton("run_sn_link", "Generate link"),
                                plotOutput('single_enrich',height = 100),
                                plotOutput('sn',height = 700),
                                #HTML(paste(textOutput('get_link'))),
                                HTML(paste0(htmlOutput('sn_url')))
                       ),
                       tabPanel('Neighbours',
                                uiOutput('gene_list'),
                                actionButton('run_neigh',"Generate Plot"),
                                #textInput(inputId = 'genes', label = 'genes', value = "SOX2"),
                                #HTML(paste(textOutput('gene_list'))),
                                #HTML(paste(textOutput('neighbour_plot')))
                       
                                plotOutput('neighbour_plot',height = 700)
                                )
            )#navbarPage
            ) #column
        
   )#fluidRow
)#fluidPage

# Define server logic required to draw a histogram
server <- function(input, output) {
  
  string_db = readRDS("string_db")
  
  
  #go_files = list.files(getwd())
  #go_files

  output$table_name = renderText(paste("df.topGO_",input$limit,".",input$stat,".",input$ontology,".",input$data,".rds",sep=''))
  
  topGO_table = reactive({
    #load(paste('topGO_sig',input$ontology,input$data,sep='.'))
    topGO_table = readRDS(paste("df.topGO_",input$limit,".",input$stat,".",input$ontology,".",input$data,".rds",sep=''))
    topGO_table
    
  })
  
  temp = F
  if(temp == T){
    mapped_data = readRDS('sig_mapped.df_GE_log2_ratio_different_all_MCT_all.rds')
   df.topGO_total.sig.stat = readRDS("df.topGO_total.sig.stat.classicFisher.bonferroni.BP.df_GE_log2_ratio_different_all_MCT_all.rds")
    df.topGO_total.sig.stat
    barplot(as.matrix(df.topGO_total.sig.stat[1,c("fisher.weight01.down","fisher.weight01.up")]),beside = T)
    
    m.enrich = readRDS('m.enrich.fisher.weight01.BP.df_GE_log2_ratio_different_all_MCT_all.rds')
    barplot(rev(m.enrich[1,1]),beside=TRUE,names.arg = rev(rownames(m.enrich)[1]),las=1,col=c('red'),xlim=c(min(m.enrich,na.rm=TRUE),max(m.enrich,na.rm=TRUE)),main=paste(enrichment,'topGO',stat_select,r[3],r[4]),horiz=TRUE,cex.main=0.5)
    barplot(rev(m.enrich[1,2]),beside=TRUE,yaxt='n',xaxt='n',col=c('green'),add=TRUE,horiz=TRUE,xlab= 'test')
    #barplot(t(m.enrich[c(1:40),]),beside=TRUE,names.arg = rownames(m.enrich)[c(1:40)],las=3,col=c('red','green'))
    abline(v = -log10(topGO_enrich_cutoff),col='blue')
    abline(v = log10(topGO_enrich_cutoff),col='blue')
    abline(v = 0,col='black')
  }
  
  output$term_list = renderUI({
    selectInput('term','Select GO Term',topGO_table()$Term)
  })
  
  mapped_st = reactive({
    mapped = readRDS(paste0(input$mapped,".",input$data,".rds"))
    mapped
  })
  
  output$gene_list = renderUI({
    mapped_data = readRDS('all_mapped.df_GE_log2_ratio_different_all_MCT_all.rds')
    
    selectInput('genes','select genes',mapped_data$id,multiple = T)
  })
  
  payload_id = reactive({
    readRDS(paste0('payload_id.',input$data,'.rds'))
  })
  
  output$topGO_sig = renderDataTable(topGO_table())
  
  
  output$file_list = renderText(go_files)
  
  output$m_name = renderText(paste0('m.enrich.',input$stat,'.',input$ontology,'.',input$data,'.rds'))
  
  m.enrich = reactive({
    m.enrich = readRDS(paste0('m.enrich.',input$stat,'.',input$ontology,'.',input$data,'.rds'))
  })
  output$enrich_slider = renderUI({
      sliderInput(inputId = 'm_range','enrichment range',min(0),dim(m.enrich())[1],value = c(0,dim(m.enrich())[1]),dragRange=T)
  })
  
  output$enrich_barplot = renderPlot({
    m.enrich = m.enrich()
    par(xpd=FALSE,mar = c(4, 25, 4, 1) + 0.1,cex.axis=1,cex.main = 0.5,mfrow = c(1,1)) #c(bottom, left, top, right)
    # try(barplot(rev(m.enrich[,1]),beside=TRUE,names.arg = rev(rownames(m.enrich)),las=1,col=c('red'),xlim=c(min(m.enrich,na.rm=TRUE),max(m.enrich,na.rm=TRUE)),main = paste(enrichment,'topGO',stat_select),horiz = TRUE))
    # try(barplot(rev(m.enrich[,2]),beside=TRUE,col=c('green'),add=TRUE,horiz=TRUE,yaxt='n'))
    # try(abline(v = -log10(topGO_enrich_cutoff),col='blue'))
    # try(abline(v = log10(topGO_enrich_cutoff),col='blue'))
    # try(abline(v = 0,col='black'))
    
    range = c(input$m_range[1]:input$m_range[2])
    
    #par(xpd=FALSE,mar = c(4, 18, 4, 2) + 0.1,cex.axis=0.6,mfrow = c(1,1)) #c(bottom, left, top, right)
    barplot(rev(m.enrich[range,1]),beside=TRUE,names.arg = rev(rownames(m.enrich)[range]),las=1,col=c('red'),xlim=c(min(m.enrich,na.rm=TRUE),max(m.enrich,na.rm=TRUE)),horiz=TRUE,cex.main=0.5)
    barplot(rev(m.enrich[range,2]),beside=TRUE,yaxt='n',xaxt='n',col=c('green'),add=TRUE,horiz=TRUE,xlab= 'test')
    #barplot(t(m.enrich[c(1:40),]),beside=TRUE,names.arg = rownames(m.enrich)[c(1:40)],las=3,col=c('red','green'))
    abline(v = -log10(topGO_enrich_cutoff),col='blue')
    abline(v = log10(topGO_enrich_cutoff),col='blue')
    abline(v = 0,col='black')
    #m.enrich
  })
  
  output$single_enrich = renderPlot({
    m.enrich = m.enrich()
    par(xpd=FALSE,mar = c(1, 20, 1, 1) + 0.1,cex.axis=1,cex.main = 0.5,mfrow = c(1,1)) #c(bottom, left, top, right)
    # try(barplot(rev(m.enrich[,1]),beside=TRUE,names.arg = rev(rownames(m.enrich)),las=1,col=c('red'),xlim=c(min(m.enrich,na.rm=TRUE),max(m.enrich,na.rm=TRUE)),main = paste(enrichment,'topGO',stat_select),horiz = TRUE))
    # try(barplot(rev(m.enrich[,2]),beside=TRUE,col=c('green'),add=TRUE,horiz=TRUE,yaxt='n'))
    # try(abline(v = -log10(topGO_enrich_cutoff),col='blue'))
    # try(abline(v = log10(topGO_enrich_cutoff),col='blue'))
    # try(abline(v = 0,col='black'))
    
    range = grep(input$term,rownames(m.enrich))
    
    #par(xpd=FALSE,mar = c(4, 18, 4, 2) + 0.1,cex.axis=0.6,mfrow = c(1,1)) #c(bottom, left, top, right)
    barplot(rev(m.enrich[range,1]),beside=TRUE,names.arg = rev(rownames(m.enrich)[range]),las=1,col=c('red'),xlim=c(min(m.enrich,na.rm=TRUE),max(m.enrich,na.rm=TRUE)),horiz=TRUE,cex.main=0.5)
    barplot(rev(m.enrich[range,2]),beside=TRUE,yaxt='n',xaxt='n',col=c('green'),add=TRUE,horiz=TRUE,xlab= 'test')
    #barplot(t(m.enrich[c(1:40),]),beside=TRUE,names.arg = rownames(m.enrich)[c(1:40)],las=3,col=c('red','green'))
    abline(v = -log10(topGO_enrich_cutoff),col='blue')
    abline(v = log10(topGO_enrich_cutoff),col='blue')
    abline(v = 0,col='black')
    #m.enrich
  })
  
  
  annot = readRDS("annot.df_GE_log2_ratio_different_all_MCT_all.rds")

  
  
  
  string_hits_list = reactive({
    mapped_data = mapped_st()
    GO_term = input$term
    GO_id = topGO_table()$GO.ID[topGO_table()$Term == GO_term]
    string_GO_members = annot$STRING_id[annot$term_id == GO_id]
    string_GO_members
    GO_members = string_GO_members
    STRING_hits = GO_members[GO_members %in% mapped_data$STRING_id]
    STRING_hits
    
  })
  
  output$term_num = renderText(paste( dim(topGO_table())[1],'terms'))
  
  output$sn_list = renderText(paste(length(string_hits_list()),'nodes'))
  observeEvent(input$run_sn, {
    output$sn = renderPlot({
      STRING_hits = string_hits_list()
      string_db$plot_network(STRING_hits,payload_id=payload_id(),add_link = FALSE)
    })
  })

  observeEvent(input$run_sn,{
     output$sn_url = renderText({
      STRING_hits = string_hits_list()
      get_link = string_db$get_link(STRING_hits,payload_id = payload_id())
      paste('<a href=',get_link,' class="btn btn-default">Go to stringdb.org</a>')
    })
  })
  


  
  observeEvent(input$run_neigh,{
    output$neighbour_plot = renderPlot({
      mapped_data = mapped_st()
      gene_list = input$genes
      custom_list = string_db$mp(gene_list)
      custom_list
      neighbors = string_db$get_neighbors(custom_list)
      #string_db$get_interactions(custom_list)
      int = c(intersect(mapped_data$STRING_id,neighbors),custom_list)
      int
      string_db$plot_network(int,payload_id=payload_id(),add_link = FALSE)
    })
  })
  
  
  
  
   
   
}

# Run the application 
shinyApp(ui = ui, server = server)

